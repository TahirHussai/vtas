@page "/personal/dashboard"
@attribute [Authorize]
@using Sample.BlazorServerAPP.DTO
@using Sample.BlazorServerAPP.EndPoint;
@using Sample.BlazorServerAPP.Service;
@inject IProductRepository _productRepo



<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Dashboard</MudText>
<MudGrid>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Material.Filled.Euro" Color="Color.Primary" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Total Products</MudText>
                <MudText Typo="Typo.h5">@TotalProducts</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Material.Filled.Layers" Color="Color.Secondary" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Total Categories</MudText>
                <MudText Typo="Typo.h5">@TotalCategories</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Material.Filled.Public" Color="Color.Success" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Global Spread</MudText>
                <MudText Typo="Typo.h5">12%</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Custom.Uncategorized.Radioactive" Color="Color.Warning" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Roentgen</MudText>
                <MudText Typo="Typo.h5">3,6</MudText>
            </div>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" md="6">
        <MudPaper Class="pa-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">By Category</MudText>
                </CardHeaderContent>
            </MudCardHeader>
                <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@data" InputLabels="@labels">
                    <CustomGraphics>
                        <text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Total</text>
                        <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@TotalCategories.ToString()</text>
                </CustomGraphics>
            </MudChart>
        </MudPaper>
    </MudItem>
    <MudItem xs="12"  md="6">
        <MudPaper Class="pa-4">
            <MudChart ChartType="ChartType.Pie" InputData="@data" @bind-SelectedIndex="Index" InputLabels="@labels" Width="300px" Height="360px" />

           
        </MudPaper>
    </MudItem>
   
    <MudItem xs="12" sm="12" md="6">
        <MudCard Style="height:100%;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Earning Report</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="px-0">
                <MudSimpleTable Elevation="0" Hover="true">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Priority</th>
                            <th>Earnings</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var report in earningReports.OrderBy(x => x.Name))
                        {
                            <tr>
                                <td>
                                    <div class="d-flex flex-row">
                                        <MudAvatar Image="@report.Avatar" Class="mud-elevation-25" />
                                        <div class="ml-6">
                                            <MudText Typo="Typo.subtitle2">@report.Name</MudText>
                                            <MudText Typo="Typo.body2">@report.Title</MudText>
                                        </div>
                                    </div>
                                </td>
                                <td><MudChip Label="true" Color="@report.Severity" Size="Size.Small" Class="ml-auto mud-elevation-25">@report.SeverityTitle</MudChip></td>
                                <td><MudText>@report.Salary</MudText></td>
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="12" md="6">
        <MudCard Style="height:100%;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Recent incidents</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="px-0">
                <MudList Clickable="true">
                    <MudListItem>
                        <div class="d-flex flex-row">
                            <MudAvatar Class="mud-elevation-25">
                                <MudIcon Icon="@Icons.Custom.Brands.GitHub" Class="mx-4" />
                            </MudAvatar>
                            <div class="ml-6">
                                <MudText Typo="Typo.subtitle2">Issues rising</MudText>
                                <MudText Typo="Typo.body2">Issues is almost reaching 100</MudText>
                            </div>
                            <MudChip Label="true" Color="Color.Error" Size="Size.Small" Class="ml-auto mud-elevation-25">Danger</MudChip>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex flex-row">
                            <MudAvatar Class="mud-elevation-25">
                                <MudIcon Icon="@Icons.Custom.Uncategorized.Radioactive" Class="mx-4" />
                            </MudAvatar>
                            <div class="ml-6">
                                <MudText Typo="Typo.subtitle2">Incident in plant number 4</MudText>
                                <MudText Typo="Typo.body2">Fire in reactor core</MudText>
                            </div>
                            <MudChip Label="true" Color="Color.Info" Size="Size.Small" Class="ml-auto mud-elevation-25">Minor</MudChip>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex flex-row">
                            <MudAvatar Class="mud-elevation-25">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Class="mx-4" />
                            </MudAvatar>
                            <div class="ml-6">
                                <MudText Typo="Typo.subtitle2">Occupational injury</MudText>
                                <MudText Typo="Typo.body2">Employee broke a finger while writing some code</MudText>
                            </div>
                            <MudChip Label="true" Color="Color.Success" Size="Size.Small" Class="ml-auto mud-elevation-25">Dismissed</MudChip>
                        </div>
                    </MudListItem>
                </MudList>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {

    EarningReport[] earningReports = new EarningReport[]
    {
        new EarningReport { Name = "Lunees", Title = "Reactor Engineer", Avatar = "https://avatars2.githubusercontent.com/u/71094850?s=460&u=66c16f5bb7d27dc751f6759a82a3a070c8c7fe4b&v=4", Salary = "$0.99", Severity = Color.Success, SeverityTitle = "Low"},
        new EarningReport { Name = "Mikes-gh", Title = "Developer", Avatar = "https://avatars.githubusercontent.com/u/16208742?s=120&v=4", Salary = "$19.12K", Severity = Color.Secondary, SeverityTitle = "Medium"},
        new EarningReport { Name = "Garderoben", Title = "CSS Magician", Avatar = "https://avatars2.githubusercontent.com/u/10367109?s=460&amp;u=2abf95f9e01132e8e2915def42895ffe99c5d2c6&amp;v=4", Salary = "$1337", Severity = Color.Primary, SeverityTitle = "High"},
    };

    class EarningReport
    {
        public string Avatar;
        public string Name;
        public string Title;
        public Color Severity;
        public string SeverityTitle;
        public string Salary;
    }
}

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 4;
    int TotalProducts = 0;
    int TotalCategories = 0;
    string[] labels = { };
    double[] data = { 50, 25, 20, 5 };
    protected override async Task OnInitializedAsync()
    {

        string apiUrl = StaticEndPoint.GetProductCountEndpoint;
        List<ProductCategoryCountDTO> data1 = await _productRepo.getProductsByCategory(apiUrl);
        TotalProducts = data1.Sum(a => a.TotalItem);
        TotalCategories = data1.Count();
        labels = data1.Select(a => a.CategoryName).ToArray();
        data = data1.Select(a => Convert.ToDouble(a.TotalItem)).ToArray();
    }

    Random random = new Random();

    void RandomizeData()
    {
        var new_data = new double[dataSize];
        for (int i = 0; i < new_data.Length; i++)
            new_data[i] = random.NextDouble() * 100;
        data = new_data;
        StateHasChanged();
    }

    void AddDataSize()
    {
        if (dataSize < 20)
        {
            dataSize = dataSize + 1;
            RandomizeData();
        }
    }
    void RemoveDataSize()
    {
        if (dataSize > 0)
        {
            dataSize = dataSize - 1;
            RandomizeData();
        }
    }
}
@code {
    //default value cannot be 0 -> first selectedindex is 0.

    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "United States", Data = new double[] { 40, 20, 25, 27, 46, 60, 48, 80, 15 } },
        new ChartSeries() { Name = "Germany", Data = new double[] { 19, 24, 35, 13, 28, 15, 13, 16, 31 } },
        new ChartSeries() { Name = "Sweden", Data = new double[] { 8, 6, 11, 13, 4, 16, 10, 16, 18 } },
    };
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };
}
@code {


    public ChartOptions chartOptions = new ChartOptions();







    public void RandomizeLineWidths()
    {
        chartOptions.LineStrokeWidth = random.NextInt64(1, 10);
        StateHasChanged();
    }
}
@code {
    private double[] categoryData;
    private string[] categoryLabels;

    // Fetch data from API and populate categoryData and categoryLabels
    // private async Task LoadCategoryData()
    // {
    //     // Replace this with your actual API call to fetch product categories and their counts
    //     var productCategories = await ProductCategoryRepository.GetAll("api/productcategories");
    //     categoryLabels = productCategories.Select(c => c.CategoryName).ToArray();

    //     // Fetch product data and count products in each category
    //     var products = await ProductRepository.GetAll("api/products");
    //     categoryData = new double[categoryLabels.Length];

    //     foreach (var product in products)
    //     {
    //         int categoryIndex = Array.IndexOf(categoryLabels, product.ProductCategory);
    //         if (categoryIndex >= 0)
    //         {
    //             categoryData[categoryIndex]++;
    //         }
    //     }
    // }

    // Call LoadCategoryData when the component is initialized
    // protected override async Task OnInitializedAsync()
    // {
    //     await LoadCategoryData();
    // }
}


