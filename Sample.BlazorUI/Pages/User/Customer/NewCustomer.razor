@page "/new-customer"
@inject IAuthRepository _authRepo
@inject ILookUpRepository _lookupRepo
@inject ISnackbar Snackbar
@inject NavigationManager _navManager
@using Sample.DTOS
@inject LocalStorageService _localStorage

<fieldset class="fieldset" >
    <legend class="legend">  <MudText Align="Align.Center">New Customer</MudText></legend>
    <MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
        <!-- Outer fieldset -->


        <MudForm Model="@customerInfo" @ref="form" ValidationDelay="0" >
            <!-- Customer Name -->
            <MudTextField Label="Customer Name" @bind-Value="customerInfo.DisplayName" Variant="Variant.Filled" FullWidth="true" Class="mb-4" />

            <!-- Customer Contact Info -->
            <MudPaper Class="pa-4 mb-4" Outlined="true">

                <MudGrid>
                    <MudItem xs="12" sm="6" md="2">
                        <MudSelect T="int" @bind-Value="PrefixId" Label="Prefix" FullWidth="true" Variant="Variant.Filled">
                            @if (prefixList != null && prefixList.Any())
                            {
                                foreach (var item in prefixList)
                                {
                                    <MudSelectItem T="int" Value="@item.PrefixID">@item.PrefixVal</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6" md="3">
                        <MudTextField Label="First Name" @bind-Value="customerInfo.FirstName" FullWidth="true" Variant="Variant.Filled" For="@(() => customerInfo.FirstName)" Required="true" />
                    </MudItem>

                    <MudItem xs="12" sm="6" md="2">
                        <MudTextField Label="Middle Name" @bind-Value="customerInfo.MiddleName" FullWidth="true" Variant="Variant.Filled" />
                    </MudItem>

                    <MudItem xs="12" sm="6" md="3">
                        <MudTextField Label="Last Name" @bind-Value="customerInfo.LastName" FullWidth="true" Variant="Variant.Filled" For="@(() => customerInfo.LastName)" Required="true" />
                    </MudItem>

                    <MudItem xs="12" sm="6" md="2">
                        <MudSelect T="int" @bind-Value="SuffixId" Label="Suffix" FullWidth="true" Variant="Variant.Filled">
                            @foreach (var item in sufixList)
                            {
                                <MudSelectItem T="int" Value="@item.SuffixID">@item.SuffixVAL</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6" md="2">
                        <MudTextField Label="Phone" @bind-Value="customerInfo.Phone" FullWidth="true" Variant="Variant.Filled" />
                    </MudItem>

                    <MudItem xs="12" sm="6" md="2">
                        <MudTextField Label="Ext." @bind-Value="customerInfo.ExtId" FullWidth="true" Variant="Variant.Filled" />
                    </MudItem>

                    <MudItem xs="12" sm="6" md="3">
                        <MudTextField Label="Fax" @bind-Value="customerInfo.Fax" FullWidth="true" Variant="Variant.Filled" />
                    </MudItem>

                    <MudItem xs="12" sm="6" md="3">
                        <MudTextField Label="Email" @bind-Value="customerInfo.Email" FullWidth="true" Variant="Variant.Filled" For="@(() => customerInfo.Email)" Required="true" />
                    </MudItem>

                    <MudItem xs="12" sm="6" md="2">
                        <MudSelect T="int" @bind-Value="EmailTypeId" Label="Email Type" FullWidth="true" Variant="Variant.Filled">
                            @foreach (var item in emailTypeList)
                            {
                                <MudSelectItem T="int" Value="@item.EMAILTYPEID">@item.EMAILTYPEVAL</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="5">
                        <MudTextField Label="Mailing Address" @bind-Value="customerInfo.AddressDto.Address1" FullWidth="true" Variant="Variant.Filled" />
                    </MudItem>

                    <MudItem xs="12" sm="5">
                        <MudTextField Label="Address 2" @bind-Value="customerInfo.AddressDto.Address2" FullWidth="true" Variant="Variant.Filled" />
                    </MudItem>

                    <MudItem xs="12" sm="6" md="2">
                        <MudSelect T="int" @bind-Value="AddressTypeId" Label="Address Type" FullWidth="true" Variant="Variant.Filled">
                            @foreach (var item in addressTypeList)
                            {
                                <MudSelectItem T="int" Value="@item.AddressTypeID">@item.AddressTypeVAL</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField Label="City" @bind-Value="customerInfo.AddressDto.City" FullWidth="true" Variant="Variant.Filled" />
                    </MudItem>

                    <MudItem xs="12" sm="3">
                        <MudSelect T="string" Label="State" Value="selectedState" ValueChanged="stateClicked" FullWidth="true" Variant="Variant.Filled">
                            @foreach (var item in statesList)
                            {
                                <MudSelectItem T="string" Value="@item.State">@item.State</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="3">
                        <MudSelect T="string" Label="ZipCode" @bind-Value="ZipCode" FullWidth="true" Variant="Variant.Filled">
                            @foreach (var item in zipCodesList)
                            {
                                <MudSelectItem T="string" Value="@item.ZipCode">@item.ZipCode</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    @* <MudTextField Label="Zip Code" @bind-Value="customerInfo.ZipCode" FullWidth="true" Variant="Variant.Filled" />
                    </MudItem> *@
                </MudGrid>

            </MudPaper>

            <!-- Card Actions -->
            <MudCardActions>
                <MudSpacer /> <!-- Pushes the buttons to the right -->
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@(()=>form.ResetAsync())">Cancel</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleSubmit" Style="margin-left: 20px;">Submit</MudButton>
                @* <MudButton Variant="Variant.Filled" Color="Color.Primary" class="mt-5" OnClick="HandleSubmit" Size="Size.Large" FullWidth="true">Sign In</MudButton> *@

            </MudCardActions>

        </MudForm>

    </MudContainer>
</fieldset>


@code {


    private MudForm form;
    private List<PrefixDto> prefixList = new List<PrefixDto>();
    private List<SufixDto> sufixList = new List<SufixDto>();
    private List<EmailTypeDto> emailTypeList = new List<EmailTypeDto>();
    private List<AddressTypeDto> addressTypeList = new List<AddressTypeDto>();
    private List<StateDto> statesList = new List<StateDto>();
    private List<ZipCodeDto> zipCodesList = new List<ZipCodeDto>();
    private CustomResponseDto response = new CustomResponseDto();
    private int PrefixId = 0;
    private int SuffixId = 0;
    private int EmailTypeId = 0;
    private int AddressTypeId = 0;
    private string ZipCode = "";
    UserCustomerDto customerInfo = new UserCustomerDto();

    private string selectedState;

    protected async Task stateClicked(string selectedValue)
    {
        selectedState = selectedValue;

        customerInfo.AddressDto.State = selectedState;

        BindZonesDropdown(selectedState);
    }
    private async void BindZonesDropdown(string state)
    {
        zipCodesList = await GetZipCodesByState(state);
    }
    private async Task HandleSubmit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var CustomerId = await _localStorage.GetItemAsync("CustomerId");
            var ParentId = await _localStorage.GetItemAsync("ParentId");
            var LoginUserId = await _localStorage.GetItemAsync("LoginUserId");
            customerInfo.DisplayName = string.IsNullOrEmpty(customerInfo.DisplayName) ? customerInfo.FirstName : customerInfo.DisplayName;
            customerInfo.MiddleName = string.IsNullOrEmpty(customerInfo.MiddleName) ? "" : customerInfo.MiddleName;
            customerInfo.Fax = string.IsNullOrEmpty(customerInfo.Fax) ? "" : customerInfo.Fax;
            customerInfo.Phone = string.IsNullOrEmpty(customerInfo.Phone) ? "" : customerInfo.Phone;
            customerInfo.ExtId = customerInfo.ExtId == null ? 0 : customerInfo.ExtId;

            customerInfo.Password = Guid.NewGuid().ToString() + "Ads";
            customerInfo.CreatedById = LoginUserId;
            customerInfo.RoleName = "Customer";
            customerInfo.CustomerId = CustomerId;
            customerInfo.SuperAdminId = LoginUserId;
            customerInfo.Email = customerInfo.Email;
            customerInfo.SuffixId = SuffixId;
            customerInfo.PrefixId = PrefixId;
            customerInfo.EmailAddressDto.EmailTypeId = EmailTypeId;
            customerInfo.AddressDto.AddressTypeId = AddressTypeId;
            customerInfo.AddressDto.AddressTypeId = AddressTypeId;

            customerInfo.AddressDto.State = string.IsNullOrEmpty(selectedState) ? "" : selectedState;
            customerInfo.AddressDto.PostalCode = string.IsNullOrEmpty(ZipCode) ? "" : ZipCode;
            var response = await _authRepo.RegisterCustomer(customerInfo);

            if (response.IsSuccess)
            {

                Snackbar.Add(response.Message, MudBlazor.Severity.Success);
                _navManager.NavigateTo("/customerList");
            }
            else
            {
                Snackbar.Add(response.Message, MudBlazor.Severity.Warning);
            }
        }
        else
        {
            Snackbar.Add("Validation errors occurred. Please check your input.", MudBlazor.Severity.Error);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        prefixList = await _lookupRepo.GetPrefix();
        sufixList = await _lookupRepo.GetSuffix();
        emailTypeList = await _lookupRepo.GetEmailType();
        addressTypeList = await _lookupRepo.GetAddressType();
        statesList = await _lookupRepo.GetStates();
    }
    private async  Task<List<ZipCodeDto>> GetZipCodesByState(string state)
    {
        return await _lookupRepo.GetZipCodes(state);
    }
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Manage", href: "/new-customer"),
        new BreadcrumbItem("Customer", href: "/new-customer"),
    };
}
