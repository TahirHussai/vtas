@page "/cardlist"
@using Sample.Common
@inject IAuthRepository _authRepo
@inject NavigationManager _navManager
@inject ISnackbar Snackbar
@inject ILocalStorageService _localStorage
<style>
    .card-header {
        background-color: rgba(173, 216, 230, 0.8); /* Light blue with opacity */
        border-bottom: 2px solid #5F9EA0; /* Light blue border */
        color: #FF69B4; /* Hot pink for the text */
        padding: 10px;
        font-weight: bold;
        text-align: center;
    }

    .card-content {
        padding: 20px;
        border: 1px solid #D3D3D3; /* Light grey border */
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    }

    .card {
        margin: 15px;
    }
</style>
<MudContainer>
    <MudText Typo="Typo.h6" Color="Color.Success">Selected User : @UserName</MudText>
        <MudGrid>
            @if (usersList.Any())
        {

            var cust = usersList.Where(a => a.CustomerId != "" && a.CustomerId != "2314094f-0974-4783-ae24-97b801faf01d").Select(a => a.CustomerId).Distinct();
            var SuperAdmin = usersList.Where(a => a.Role == "SuperAdmin").FirstOrDefault();

            if (SuperAdmin != null)
            {
                <MudItem xs="12" sm="12" md="12" lg="12" class="card">
                    <MudCard @onclick="() => OnCardClick(SuperAdmin.Id, SuperAdmin.CustomerId)">
                        <MudCardHeader class="card-header">
                            <MudText Typo="Typo.h6" Color="Color.Surface">@SuperAdmin.Role</MudText>
                            </MudCardHeader>
                            <MudCardContent class="card-content">
                                <MudText Typo="Typo.h5">@SuperAdmin.UserName</MudText>
                                @*  <MudText>@item.Description</MudText> *@
                            </MudCardContent>
                            <MudCardActions>
                                @* <MudButton Variant="Variant.Filled" Color="Color.Primary">Action</MudButton> *@
                            </MudCardActions>
                        </MudCard>
                    </MudItem>

            }
            if (cust.Any())
            {
           
                foreach (var itm in cust)
                {
                    var customer = usersList.Where(a => a.Id == itm && a.Role == "Customer").FirstOrDefault();
                    if (customer != null)
                    {
                        <MudItem xs="12" sm="12" md="12" lg="12" class="card">
                            <MudCard @onclick="() => OnCardClick(customer.Id, customer.CustomerId)">
                                <MudCardHeader class="card-header">
                                    <MudText Typo="Typo.h6" Color="Color.Default">@customer.Role</MudText>
                                    </MudCardHeader>
                                    <MudCardContent class="card-content">
                                        <MudText Typo="Typo.h5">@customer.UserName</MudText>
                                        @*  <MudText>@item.Description</MudText> *@
                                    </MudCardContent>
                                    <MudCardActions>
                                        @* <MudButton Variant="Variant.Filled" Color="Color.Primary">Action</MudButton> *@
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                    }
                    foreach (var item in usersList.Where(a => a.CustomerId == itm))
                    {

                        <MudItem xs="12" sm="6" md="3" lg="3" class="card">
                            <MudCard @onclick="() => OnCardClick(item.Id, item.CustomerId)">
                                <MudCardHeader class="card-header">
                                    <MudText Typo="Typo.h6" Color="Color.Secondary">@item.Role</MudText>
                                    </MudCardHeader>
                                    <MudCardContent class="card-content">
                                        <MudText Typo="Typo.h5">@item.UserName</MudText>
                                        @*  <MudText>@item.Description</MudText> *@
                                    </MudCardContent>
                                    <MudCardActions>
                                        @* <MudButton Variant="Variant.Filled" Color="Color.Primary">Action</MudButton> *@
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                    }

                }
            }

        }
        else
        {
            <MudItem xs="12" sm="6" md="6" lg="6" class="card">
                <MudCard>
                    <MudCardHeader class="card-header">

                    </MudCardHeader>
                    <MudCardContent class="card-content">
                        <MudText Typo="Typo.h5"></MudText>
                        <MudText>No Record Find</MudText>
                    </MudCardContent>
                    <MudCardActions>

                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    List<UserWithRolesDto> usersList = new List<UserWithRolesDto>();
    private string UserName = "";
    protected override async Task OnInitializedAsync()
    {
        var role = await _localStorage.GetItemAsync<string>("Role");
        var CustomerId = await _localStorage.GetItemAsync<string>("CustomerId");
        var LoginUserId = await _localStorage.GetItemAsync<string>("LoginUserId");
        UserName = await _localStorage.GetItemAsync<string>("UserName");
        if (!string.IsNullOrEmpty(role) && role.Contains("SuperAdmin"))
        {
            usersList = await _authRepo.GetUsersListWithRoles();
        }
        if (!string.IsNullOrEmpty(role) && role.Contains("Customer"))
        {
            usersList = await _authRepo.GetCustomerUsersListWithRoles(LoginUserId);
        }
        if (!string.IsNullOrEmpty(role) && role.Contains("Client"))
        {
            usersList = await _authRepo.GetClientUsersWithRoles(LoginUserId, CustomerId);
        }
        if (!string.IsNullOrEmpty(role) && role.Contains("Vendor"))
        {
            usersList = await _authRepo.GetVendorsUsersWithRoles(LoginUserId, CustomerId);
        }

    }
    private async Task OnCardClick(string LoginUserId, string CustomerId)
    {
        var IsSuccess = await _authRepo.GetUserById(LoginUserId);
        if (IsSuccess)
        {
            await OnInitializedAsync();
        }
    }
}
