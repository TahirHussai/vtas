@page "/new-vendor"
@inject ISnackbar Snackbar
@inject IAuthRepository _authRepo
@inject ILookUpRepository _lookupRepo
@inject NavigationManager _navManager
@using Sample.BlazorUI.Repository.Interface
@using Sample.DTOS
@inject LocalStorageService _localStorage

<style>
    .fieldset {
    border: 1px solid #ddd;
    padding: 20px;
    border-radius: 5px;
    margin-bottom: 20px;
    }

    .legend {
    font-size: 1.2em;
    font-weight: bold;
    margin-bottom: 10px;
    color: #555;
    }
</style>

<fieldset class="fieldset">
    <legend class="legend"><MudText Align="Align.Center">New Vendor</MudText></legend>
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudForm Model="@clientInfo" @ref="form" ValidationDelay="0" >
            <MudGrid>
                <!-- Client Info Section -->
                <MudItem xs="12" md="6">
                    <MudCard>
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">Vendor Info</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudTextField Label="Vendor Name" @bind-Value="clientInfo.ClientName" Variant="Variant.Filled" FullWidth="true" Required="true" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField Label="Display Name" @bind-Value="clientInfo.DisplayName" Variant="Variant.Filled" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="12" md="4">
                                    <MudTextField Label="Internal ID" @bind-Value="clientInfo.InternalId" Variant="Variant.Filled" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField Label="Phone" @bind-Value="clientInfo.Phone" Variant="Variant.Filled" FullWidth="true" Required="true" />

                                </MudItem>
                                <MudItem xs="6" md="2">
                                    <MudTextField Label="Ext" @bind-Value="clientInfo.Ext1" Variant="Variant.Filled" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="6" md="6">
                                    <MudTextField Label="Fax" @bind-Value="clientInfo.PrimaryFax" Variant="Variant.Filled" FullWidth="true" />

                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField Label="Email" @bind-Value="clientInfo.PrimaryEmail" Variant="Variant.Filled" FullWidth="true" Required="true" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField Label="Mailing Address" @bind-Value="clientInfo.AddressDto.Address1" Variant="Variant.Filled" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField Label="Address 2" @bind-Value="clientInfo.AddressDto.Address2" Variant="Variant.Filled" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField Label="City" @bind-Value="clientInfo.AddressDto.City" Variant="Variant.Filled" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="12" md="3">
                                    <MudSelect T="string" Label="State" Value="selectedState" ValueChanged="stateClicked" FullWidth="true" Variant="Variant.Filled">
                                        @foreach (var item in statesList)
                                        {
                                            <MudSelectItem T="string" Value="@item.State">@item.State</MudSelectItem>
                                        }
                                    </MudSelect>
                                    @* <MudTextField Label="State" @bind-Value="clientInfo.AddressDto.State" Variant="Variant.Filled" FullWidth="true" /> *@
                                </MudItem>
                                <MudItem xs="12" md="3">
                                    <MudSelect T="string" Label="Postal Code" @bind-Value="ZipCode" FullWidth="true" Variant="Variant.Filled">
                                        @foreach (var item in zipCodesList)
                                        {
                                            <MudSelectItem T="string" Value="@item.ZipCode">@item.ZipCode</MudSelectItem>
                                        }
                                    </MudSelect>
                                    @* <MudTextField Label="Postal Code" @bind-Value="clientInfo.AddressDto.PostalCode" Variant="Variant.Filled" FullWidth="true" /> *@
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <!-- Contact Info Section -->
                <MudItem xs="12" md="6">
                    <MudCard>
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">Contact Info</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" md="3">
                                    <MudSelect T="int" @bind-Value="PrefixId" Label="Prefix" FullWidth="true" Variant="Variant.Filled">
                                        @if (prefixList != null && prefixList.Any())
                                        {
                                            foreach (var item in prefixList)
                                            {
                                                <MudSelectItem T="int" Value="@item.PrefixID">@item.PrefixVal</MudSelectItem>
                                            }
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="12" md="9">
                                    <MudTextField Label="Contact First Name" @bind-Value="clientInfo.FirstName" Variant="Variant.Filled" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField Label="Middle Name" @bind-Value="clientInfo.MiddleName" Variant="Variant.Filled" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField Label="Last Name" @bind-Value="clientInfo.LastName" Variant="Variant.Filled" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="12" md="3">
                                    <MudSelect T="int" @bind-Value="SuffixId" Label="Suffix" FullWidth="true" Variant="Variant.Filled">
                                        @foreach (var item in sufixList)
                                        {
                                            <MudSelectItem T="int" Value="@item.SuffixID">@item.SuffixVAL</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField Label="Phone" @bind-Value="clientInfo.Phone" Variant="Variant.Filled" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="6" md="3">
                                    <MudTextField Label="Ext" @bind-Value="clientInfo.Ext2" Variant="Variant.Filled" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="6" md="3">
                                    <MudTextField Label="Fax" @bind-Value="clientInfo.SecondaryFax" Variant="Variant.Filled" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="6" md="3">
                                    <MudTextField Label="Email" @bind-Value="clientInfo.SecondaryEmail" Variant="Variant.Filled" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudSelect T="string" Label="Client Contact" Variant="Variant.Filled">
                                    </MudSelect>
                                </MudItem>
                            </MudGrid>
                            <!-- Card Actions -->
                            <MudCardActions>
                                <MudSpacer /> <!-- Pushes the buttons to the right -->
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(()=>form.ResetAsync())" DropShadow="false">Cancel</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleSubmit" Style="margin-left: 20px;">Submit</MudButton>
                            </MudCardActions>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>

        </MudForm>
    </MudContainer>
</fieldset>







@code {





    private MudForm form;
    private CustomResponseDto response = new CustomResponseDto();
    private int PrefixId = 0;
    private int SuffixId = 0;
    private string ZipCode = "";
    UserClientDto clientInfo = new UserClientDto();

    private List<PrefixDto> prefixList = new List<PrefixDto>();
    private List<SufixDto> sufixList = new List<SufixDto>();
    private List<StateDto> statesList = new List<StateDto>();
    private List<ZipCodeDto> zipCodesList = new List<ZipCodeDto>();

    private string selectedState;
    protected override async Task OnInitializedAsync()
    {
        prefixList = await _lookupRepo.GetPrefix();
        sufixList = await _lookupRepo.GetSuffix();
        statesList = await _lookupRepo.GetStates();
    }
    private async Task HandleSubmit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var CustomerId = await _localStorage.GetItemAsync("CustomerId");
            var ParentId = await _localStorage.GetItemAsync("ParentId");
            var LoginUserId = await _localStorage.GetItemAsync("LoginUserId");



            clientInfo.RoleName = "Vendor";
            clientInfo.DisplayName = string.IsNullOrEmpty(clientInfo.DisplayName) ? clientInfo.FirstName : clientInfo.DisplayName;
            clientInfo.MiddleName = string.IsNullOrEmpty(clientInfo.MiddleName) ? "" : clientInfo.MiddleName;
            clientInfo.PrimaryFax = string.IsNullOrEmpty(clientInfo.PrimaryFax) ? "" : clientInfo.PrimaryFax;
            clientInfo.SecondaryFax = string.IsNullOrEmpty(clientInfo.SecondaryFax) ? "" : clientInfo.SecondaryFax;

            clientInfo.Phone = string.IsNullOrEmpty(clientInfo.Phone) ? "" : clientInfo.Phone;
            clientInfo.Ext1 = clientInfo.Ext1 == null ? "" : clientInfo.Ext1;

            clientInfo.Password = Guid.NewGuid().ToString() + "Ads";
            clientInfo.CreatedById = LoginUserId;
            clientInfo.RoleName = "Vendor";
            clientInfo.CustomerId = CustomerId;
            clientInfo.SuperAdminId = ParentId;
            clientInfo.PrimaryEmail = clientInfo.PrimaryEmail;
            clientInfo.SecondaryEmail = clientInfo.SecondaryEmail;
            clientInfo.SuffixId = SuffixId;
            clientInfo.PrefixId = PrefixId;


            clientInfo.AddressDto.State = string.IsNullOrEmpty(selectedState) ? "" : selectedState;
            clientInfo.AddressDto.PostalCode = string.IsNullOrEmpty(ZipCode) ? "" : ZipCode;
            var response = await _authRepo.RegisterClient(clientInfo);

            if (response.IsSuccess)
            {
                Snackbar.Add(response.Message, MudBlazor.Severity.Success);
                _navManager.NavigateTo("/vendorList");
            }
            else
            {
                Snackbar.Add(response.Message, MudBlazor.Severity.Warning);
            }
        }
        else
        {
            Snackbar.Add("Validation errors occurred. Please check your input.", MudBlazor.Severity.Error);
        }
    }
    protected async Task stateClicked(string selectedValue)
    {
        selectedState = selectedValue;

        clientInfo.AddressDto.State = selectedState;

        BindZonesDropdown(selectedState);
    }
    private async void BindZonesDropdown(string state)
    {
        zipCodesList = await GetZipCodesByState(state);
    }
    private async Task<List<ZipCodeDto>> GetZipCodesByState(string state)
    {
        return await _lookupRepo.GetZipCodes(state);
    }
}


