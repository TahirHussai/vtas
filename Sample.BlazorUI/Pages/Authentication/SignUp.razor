@page "/Authentication/SignUp"
@layout LogInLayout
@using Sample.BlazorUI.DTO;
@inject NavigationManager _nav
@inject IAuthRepository _authRepo
<style>
    .card-body.p-5.text-center {
        padding:0rem !important;
    }

    .form-control{
        width:75% !important;
        margin-left:56px !important;

    }


    .btn.btn-success{
        margin-top: 5% !important;
    }
    .container a{
        margin-top: 5% !important;
    }
    
</style>
@if (IsFields == true)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <strong>Someting went wrong!</strong>
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}



<MudForm Model="@userDto" @ref="@form" ValidationDelay="0">

    <MudText Typo="Typo.h4" GutterBottom="true">Sign Up</MudText>

    <MudText>Already have account? <MudLink Href="/login">Sign In</MudLink></MudText>

    <MudTextField T="string" @bind-Value="@userDto.FirstName" Label="E-FirsName" Variant="Variant.Outlined" Class="my-6"></MudTextField>
    <MudTextField T="string" @bind-Value="@userDto.LastName" Label="E-LastName" Variant="Variant.Outlined" Class="my-6"></MudTextField>
    <MudTextField T="string" @bind-Value="@userDto.Email" Label="E-mail" Variant="Variant.Outlined" Class="my-6"></MudTextField>

    <MudTextField @bind-Value="@userDto.Password" Label="Password" Variant="Variant.Outlined" Adornment="Adornment.End" />

    <div Class="d-flex justify-space-between align-center">
      
    </div>

    <MudText></MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@( () =>  HandleRegistration())" Size="Size.Large" FullWidth="true">Sign Up</MudButton>
</MudForm>



@code {
    MudForm form;
    UserDto userDto = new UserDto();
    bool IsFields = false;
    protected async Task HandleRegistration()
    {
        var responce = await _authRepo.Register(userDto);
        if (responce)
        {
            _nav.NavigateTo("/login");
        }
        else
        {
            IsFields = true;
        }
    }

    string Password { get; set; }
    public bool AgreeToTerms { get; set; }

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}

