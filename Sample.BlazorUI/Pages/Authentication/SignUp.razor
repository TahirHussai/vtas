@page "/Authentication/SignUp"
@layout LogInLayout
@using Sample.DTOS
@inject NavigationManager _nav
@inject IAuthRepository _authRepo

<style>
    .card-body.p-5.text-center {
        padding: 0rem !important;
    }

    .form-control {
        width: 75% !important;
        margin-left: 56px !important;
    }

    .btn.btn-success {
        margin-top: 5% !important;
    }

    .container a {
        margin-top: 5% !important;
    }
</style>

@if (IsFields)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <strong>Something went wrong!</strong>
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

<MudForm Model="@userDto" @ref="form" ValidationDelay="0">
    <MudText Typo="Typo.h4" GutterBottom="true">Sign Up</MudText>

    <MudText>Already have an account? <MudLink Href="/login">Sign In</MudLink></MudText>

    <MudTextField T="string" @bind-Value="userDto.FirstName" Label="First Name" Variant="Variant.Outlined" Class="my-6" For="@(() => userDto.FirstName)" Required="true" />

    <MudTextField T="string" @bind-Value="userDto.LastName" Label="Last Name" Variant="Variant.Outlined" Class="my-6" For="@(() => userDto.LastName)"  />

    <MudTextField T="string" @bind-Value="userDto.Email" Label="E-mail" Variant="Variant.Outlined" Class="my-6" For="@(() => userDto.Email)" Required="true" />

    <MudTextField T="string" @bind-Value="userDto.Password" Label="Password" Variant="Variant.Outlined" Adornment="Adornment.End" For="@(() => userDto.Password)" Required="true" />

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleRegistration" Size="Size.Large" FullWidth="true">Sign Up</MudButton>
</MudForm>

@code {
    private MudForm form;
    private UserDto userDto = new UserDto();
    private bool IsFields = false;

    private async Task HandleRegistration()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var response = await _authRepo.Register(userDto);
            if (response)
            {
                _nav.NavigateTo("/login");
            }
            else
            {
                IsFields = true;
            }
        }
        else
        {
            IsFields = true;
        }
    }

    private bool PasswordVisibility;
    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}
