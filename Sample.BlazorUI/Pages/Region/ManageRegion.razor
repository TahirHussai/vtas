@page "/region/create"
@using Sample.DTOS
@using System.Text.Json;

@using System.ComponentModel.DataAnnotations
@using Sample.Services.Interfaces
@inject Sample.BlazorUI.Services.Interface.IRegionService _regionRepo
@inject NavigationManager _navManager
@inject ISnackbar Snackbar

<MudTabs Elevation="1" Rounded="true" PanelClass="mt-6">
    <MudTabPanel Text="Region">
        <MudGrid>
            <MudItem xs="12" sm="12" md="12">
                <MudForm Model="@model" @ref="@form" ValidationDelay="0">
                    <fieldset class="fieldSet">
                        <legend class="lengend">Add New  Region</legend>
                        <MudCard>

                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="6" md="6">
                                        <MudTextField T="string" @bind-Value="model.Abv" Label="Abv" Margin="Margin.Normal"></MudTextField>
                                    </MudItem>
                                    <MudItem xs="6" md="6">
                                        <MudTextField T="string" @bind-Value="model.Description" Label="Description" Margin="Margin.Normal"></MudTextField>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                            <MudCardActions Class="pb-4 pl-4">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@( () =>  Save())">Save</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.ResetAsync())" Class="mx-2">Reset</MudButton>
                                <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=> RegionList())">Cancel</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </fieldset>
                </MudForm>
            </MudItem>
            <MudItem xs="12" sm="12" md="12">
                <fieldset class="fieldSet">
                    <legend class="lengend"> Region List</legend>
                    <MudTable Elevation="25" Items="regionList" Filter="new Func<RegionDTO, bool>(Search)" @bind-model="model">
                        <ToolBarContent>

                            <MudTextField @bind-Value="searchString" Placeholder="Search for Categories..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Id</MudTh>
                            <MudTh>Abv</MudTh>
                            <MudTh>Description</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Id">@context.RegionID</MudTd>
                            <MudTd DataLabel="FirstName">@context.Abv</MudTd>
                            <MudTd DataLabel="LastName">@context.Description</MudTd>
                            <MudTd DataLabel="">
                                <MudFab Color="Color.Primary" @onclick="@(()=>Edit(@context.RegionID))" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />

                                @*<MudFab @onclick="@(()=>Delete(@context.ID))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />*@
                            </MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager />
                        </PagerContent>
                    </MudTable>
                </fieldset>
            </MudItem>
        </MudGrid>
    </MudTabPanel>

</MudTabs>

@code {
    MudForm form;
    private string searchString = "";
    RegionDTO model = new RegionDTO();
    List<RegionDTO> regionList = new List<RegionDTO>();

    protected override async Task OnInitializedAsync()
    {
        await RegionList();
    }
    private async Task RegionList()
    {
        var response = await _regionRepo.Get();
        if (response.IsSuccess)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

            regionList = JsonSerializer.Deserialize<List<RegionDTO>>(response.Obj.ToString(), options);

        }

    }
    private bool Search(RegionDTO cat)
    {

        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (cat.Abv.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || cat.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;

    }
    bool isField = false;
    private async Task Save()
    {
        CustomResponseDto responseModel = new CustomResponseDto();
        if (model.RegionID > 0)
        {
            responseModel = await _regionRepo.Upate(model);
            if (responseModel.IsSuccess == true)
            {
                Snackbar.Add("Operation Performed Successfully!.", MudBlazor.Severity.Success);
                regionList = new List<RegionDTO>();
                await RegionList();
            }
            else
            {
                await RegionList();
                isField = true;
                Snackbar.Add("Something went wrong!.", MudBlazor.Severity.Warning);
            }
        }
        else
        {
            responseModel = await _regionRepo.Add(model);
            if (responseModel.IsSuccess == true)
            {
                Snackbar.Add("Operation Performed Successfully!.", MudBlazor.Severity.Success);
                regionList = new List<RegionDTO>();
                await RegionList();
            }
            else
            {
                await RegionList();
                isField = true;
                Snackbar.Add("Something went wrong!.", MudBlazor.Severity.Warning);
            }
        }
    }
    private async Task Edit(int id)
    {
        var response = await _regionRepo.GetById(id);
        if (response.IsSuccess)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

            model = JsonSerializer.Deserialize<RegionDTO>(response.Obj.ToString(), options);
        }
    }
    private void Delete(int id)
    {
        //customerService.DeleteCustomer(id);
        //snackBar.Add("Customer Deleted.", Severity.Success);
        //GetCustomers();
    }


} 